openapi: 3.1.0
info:
  title: Agno AgentOS
  description: An agent operating system.
  version: 1.0.0
paths:
  /health:
    get:
      tags:
        - Core
      summary: Health Check
      description: Check the health status of the AgentOS API. Returns a simple status indicator.
      operationId: health_check
      parameters:
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: API is healthy and operational
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: ok
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /config:
    get:
      tags:
        - Core
      summary: Get OS Configuration
      description: |-
        Retrieve the complete configuration of the AgentOS instance, including:

        - Available models and databases
        - Registered agents, teams, and workflows
        - Chat, session, memory, knowledge, and evaluation configurations
        - Available interfaces and their routes
      operationId: get_config
      parameters:
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: OS configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
              example:
                os_id: demo
                description: Example AgentOS configuration
                available_models: []
                databases:
                  - 9c884dc4-9066-448c-9074-ef49ec7eb73c
                session:
                  dbs:
                    - db_id: 9c884dc4-9066-448c-9074-ef49ec7eb73c
                      domain_config:
                        display_name: Sessions
                metrics:
                  dbs:
                    - db_id: 9c884dc4-9066-448c-9074-ef49ec7eb73c
                      domain_config:
                        display_name: Metrics
                memory:
                  dbs:
                    - db_id: 9c884dc4-9066-448c-9074-ef49ec7eb73c
                      domain_config:
                        display_name: Memory
                knowledge:
                  dbs:
                    - db_id: 9c884dc4-9066-448c-9074-ef49ec7eb73c
                      domain_config:
                        display_name: Knowledge
                evals:
                  dbs:
                    - db_id: 9c884dc4-9066-448c-9074-ef49ec7eb73c
                      domain_config:
                        display_name: Evals
                agents:
                  - id: main-agent
                    name: Main Agent
                    db_id: 9c884dc4-9066-448c-9074-ef49ec7eb73c
                teams: []
                workflows: []
                interfaces: []
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /models:
    get:
      tags:
        - Core
      summary: Get Available Models
      description: Retrieve a list of all unique models currently used by agents and teams in this OS instance. This includes the model ID and provider information for each model.
      operationId: get_models
      parameters:
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: List of models retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
                title: Response Get Models
              example:
                - id: gpt-4
                  provider: openai
                - id: claude-3-sonnet
                  provider: anthropic
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /agents/{agent_id}/runs:
    post:
      tags:
        - Agents
      summary: Create Agent Run
      description: |-
        Execute an agent with a message and optional media files. Supports both streaming and non-streaming responses.

        **Features:**
        - Text message input with optional session management
        - Multi-media support: images (PNG, JPEG, WebP), audio (WAV, MP3), video (MP4, WebM, etc.)
        - Document processing: PDF, CSV, DOCX, TXT, JSON
        - Real-time streaming responses with Server-Sent Events (SSE)
        - User and session context preservation

        **Streaming Response:**
        When `stream=true`, returns SSE events with `event` and `data` fields.
      operationId: create_agent_run
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            title: Agent Id
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_create_agent_run'
      responses:
        "200":
          description: Agent run executed successfully
          content:
            application/json:
              schema: {}
            text/event-stream:
              example: |+
                event: RunStarted
                data: {"content": "Hello!", "run_id": "123..."}

        "400":
          description: Invalid request or unsupported file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /agents/{agent_id}/runs/{run_id}/cancel:
    post:
      tags:
        - Agents
      summary: Cancel Agent Run
      description: |-
        Cancel a currently executing agent run. This will attempt to stop the agent's execution gracefully.

        **Note:** Cancellation may not be immediate for all operations.
      operationId: cancel_agent_run
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            title: Agent Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to cancel run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /agents/{agent_id}/runs/{run_id}/continue:
    post:
      tags:
        - Agents
      summary: Continue Agent Run
      description: |-
        Continue a paused or incomplete agent run with updated tool results.

        **Use Cases:**
        - Resume execution after tool approval/rejection
        - Provide manual tool execution results

        **Tools Parameter:**
        JSON string containing array of tool execution objects with results.
      operationId: continue_agent_run
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            title: Agent Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_continue_agent_run'
      responses:
        "200":
          description: Agent run continued successfully
          content:
            application/json:
              schema: {}
            text/event-stream:
              example: |+
                event: RunContent
                data: {"created_at": 1757348314, "run_id": "123..."}

        "400":
          description: Invalid JSON in tools field or invalid tool structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /agents:
    get:
      tags:
        - Agents
      summary: List All Agents
      description: |-
        Retrieve a comprehensive list of all agents configured in this OS instance.

        **Returns:**
        - Agent metadata (ID, name, description)
        - Model configuration and capabilities
        - Available tools and their configurations
        - Session, knowledge, memory, and reasoning settings
        - Only meaningful (non-default) configurations are included
      operationId: get_agents
      parameters:
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: List of agents retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentResponse'
                title: Response Get Agents
              example:
                - id: main-agent
                  name: Main Agent
                  db_id: c6bf0644-feb8-4930-a305-380dae5ad6aa
                  model:
                    name: OpenAIChat
                    model: gpt-4o
                    provider: OpenAI
                  sessions:
                    session_table: agno_sessions
                  knowledge:
                    knowledge_table: main_knowledge
                  system_message:
                    markdown: true
                    add_datetime_to_context: true
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /agents/{agent_id}:
    get:
      tags:
        - Agents
      summary: Get Agent Details
      description: |-
        Retrieve detailed configuration and capabilities of a specific agent.

        **Returns comprehensive agent information including:**
        - Model configuration and provider details
        - Complete tool inventory and configurations
        - Session management settings
        - Knowledge base and memory configurations
        - Reasoning capabilities and settings
        - System prompts and response formatting options
      operationId: get_agent
      parameters:
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            title: Agent Id
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Agent details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
              example:
                id: main-agent
                name: Main Agent
                db_id: 9e064c70-6821-4840-a333-ce6230908a70
                model:
                  name: OpenAIChat
                  model: gpt-4o
                  provider: OpenAI
                sessions:
                  session_table: agno_sessions
                knowledge:
                  knowledge_table: main_knowledge
                system_message:
                  markdown: true
                  add_datetime_to_context: true
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /teams/{team_id}/runs:
    post:
      tags:
        - Teams
      summary: Create Team Run
      description: |-
        Execute a team collaboration with multiple agents working together on a task.

        **Features:**
        - Text message input with optional session management
        - Multi-media support: images (PNG, JPEG, WebP), audio (WAV, MP3), video (MP4, WebM, etc.)
        - Document processing: PDF, CSV, DOCX, TXT, JSON
        - Real-time streaming responses with Server-Sent Events (SSE)
        - User and session context preservation

        **Streaming Response:**
        When `stream=true`, returns SSE events with `event` and `data` fields.
      operationId: create_team_run
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            title: Team Id
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_create_team_run'
      responses:
        "200":
          description: Team run executed successfully
          content:
            application/json:
              schema: {}
            text/event-stream:
              example: |+
                event: RunStarted
                data: {"content": "Hello!", "run_id": "123..."}

        "400":
          description: Invalid request or unsupported file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /teams/{team_id}/runs/{run_id}/cancel:
    post:
      tags:
        - Teams
      summary: Cancel Team Run
      description: |-
        Cancel a currently executing team run. This will attempt to stop the team's execution gracefully.

        **Note:** Cancellation may not be immediate for all operations.
      operationId: cancel_team_run
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            title: Team Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to cancel team run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /teams:
    get:
      tags:
        - Teams
      summary: List All Teams
      description: |-
        Retrieve a comprehensive list of all teams configured in this OS instance.

        **Returns team information including:**
        - Team metadata (ID, name, description, execution mode)
        - Model configuration for team coordination
        - Team member roster with roles and capabilities
        - Knowledge sharing and memory configurations
      operationId: get_teams
      parameters:
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: List of teams retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamResponse'
                title: Response Get Teams
              example:
                - team_id: basic-team
                  name: Basic Team
                  mode: coordinate
                  model:
                    name: OpenAIChat
                    model: gpt-4o
                    provider: OpenAI
                  tools:
                    - name: transfer_task_to_member
                      description: |-
                        Use this function to transfer a task to the selected team member.
                        You must provide a clear and concise description of the task the member should achieve AND the expected output.
                      parameters:
                        type: object
                        properties:
                          member_id:
                            type: string
                            description: (str) The ID of the member to transfer the task to. Use only the ID of the member, not the ID of the team followed by the ID of the member.
                          task_description:
                            type: string
                            description: (str) A clear and concise description of the task the member should achieve.
                          expected_output:
                            type: string
                            description: (str) The expected output from the member (optional).
                        additionalProperties: false
                        required:
                          - member_id
                          - task_description
                  members:
                    - agent_id: basic-agent
                      name: Basic Agent
                      model:
                        name: OpenAIChat
                        model: gpt-4o
                        provider: OpenAI gpt-4o
                      memory:
                        app_name: Memory
                        model:
                          name: OpenAIChat
                          model: gpt-4o
                          provider: OpenAI
                      session_table: agno_sessions
                      memory_table: agno_memories
                  enable_agentic_context: false
                  memory:
                    app_name: agno_memories
                    app_url: /memory/1
                    model:
                      name: OpenAIChat
                      model: gpt-4o
                      provider: OpenAI
                  async_mode: false
                  session_table: agno_sessions
                  memory_table: agno_memories
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /teams/{team_id}:
    get:
      tags:
        - Teams
      summary: Get Team Details
      description: Retrieve detailed configuration and member information for a specific team.
      operationId: get_team
      parameters:
        - name: team_id
          in: path
          required: true
          schema:
            type: string
            title: Team Id
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Team details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamResponse'
              example:
                team_id: basic-team
                name: Basic Team
                mode: coordinate
                model:
                  name: OpenAIChat
                  model: gpt-4o
                  provider: OpenAI
                tools:
                  - name: transfer_task_to_member
                    description: |-
                      Use this function to transfer a task to the selected team member.
                      You must provide a clear and concise description of the task the member should achieve AND the expected output.
                    parameters:
                      type: object
                      properties:
                        member_id:
                          type: string
                          description: (str) The ID of the member to transfer the task to. Use only the ID of the member, not the ID of the team followed by the ID of the member.
                        task_description:
                          type: string
                          description: (str) A clear and concise description of the task the member should achieve.
                        expected_output:
                          type: string
                          description: (str) The expected output from the member (optional).
                      additionalProperties: false
                      required:
                        - member_id
                        - task_description
                members:
                  - agent_id: basic-agent
                    name: Basic Agent
                    model:
                      name: OpenAIChat
                      model: gpt-4o
                      provider: OpenAI gpt-4o
                    memory:
                      app_name: Memory
                      model:
                        name: OpenAIChat
                        model: gpt-4o
                        provider: OpenAI
                    session_table: agno_sessions
                    memory_table: agno_memories
                enable_agentic_context: false
                memory:
                  app_name: Memory
                  model:
                    name: OpenAIChat
                    model: gpt-4o
                    provider: OpenAI
                async_mode: false
                session_table: agno_sessions
                memory_table: agno_memories
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /workflows:
    get:
      tags:
        - Workflows
      summary: List All Workflows
      description: |-
        Retrieve a comprehensive list of all workflows configured in this OS instance.

        **Return Information:**
        - Workflow metadata (ID, name, description)
        - Input schema requirements
        - Step sequence and execution flow
        - Associated agents and teams
      operationId: get_workflows
      parameters:
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: List of workflows retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkflowSummaryResponse'
                title: Response Get Workflows
              example:
                - id: content-creation-workflow
                  name: Content Creation Workflow
                  description: Automated content creation from blog posts to social media
                  db_id: "123"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /workflows/{workflow_id}:
    get:
      tags:
        - Workflows
      summary: Get Workflow Details
      description: Retrieve detailed configuration and step information for a specific workflow.
      operationId: get_workflow
      parameters:
        - name: workflow_id
          in: path
          required: true
          schema:
            type: string
            title: Workflow Id
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Workflow details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
              example:
                id: content-creation-workflow
                name: Content Creation Workflow
                description: Automated content creation from blog posts to social media
                db_id: "123"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /workflows/{workflow_id}/runs:
    post:
      tags:
        - Workflows
      summary: Execute Workflow
      description: |-
        Execute a workflow with the provided input data. Workflows can run in streaming or batch mode.

        **Execution Modes:**
        - **Streaming (`stream=true`)**: Real-time step-by-step execution updates via SSE
        - **Non-Streaming (`stream=false`)**: Complete workflow execution with final result

        **Workflow Execution Process:**
        1. Input validation against workflow schema
        2. Sequential or parallel step execution based on workflow design
        3. Data flow between steps with transformation
        4. Error handling and automatic retries where configured
        5. Final result compilation and response

        **Session Management:**
        Workflows support session continuity for stateful execution across multiple runs.
      operationId: create_workflow_run
      parameters:
        - name: workflow_id
          in: path
          required: true
          schema:
            type: string
            title: Workflow Id
        - name: kwargs
          in: query
          required: true
          schema:
            title: Kwargs
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_create_workflow_run'
      responses:
        "200":
          description: Workflow executed successfully
          content:
            application/json:
              schema: {}
            text/event-stream:
              example: |+
                event: RunStarted
                data: {"content": "Hello!", "run_id": "123..."}

        "400":
          description: Invalid input data or workflow configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Workflow not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Workflow execution error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /workflows/{workflow_id}/runs/{run_id}/cancel:
    post:
      tags:
        - Workflows
      summary: Cancel Workflow Run
      description: |-
        Cancel a currently executing workflow run, stopping all active steps and cleanup.
        **Note:** Complex workflows with multiple parallel steps may take time to fully cancel.
      operationId: cancel_workflow_run
      parameters:
        - name: workflow_id
          in: path
          required: true
          schema:
            type: string
            title: Workflow Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Workflow or run not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to cancel workflow run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /sessions:
    get:
      tags:
        - Sessions
      summary: List Sessions
      description: Retrieve paginated list of sessions with filtering and sorting options. Supports filtering by session type (agent, team, workflow), component, user, and name. Sessions represent conversation histories and execution contexts.
      operationId: get_sessions
      parameters:
        - name: type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SessionType'
            description: Type of sessions to retrieve (agent, team, or workflow)
            default: agent
          description: Type of sessions to retrieve (agent, team, or workflow)
        - name: component_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Filter sessions by component ID (agent/team/workflow ID)
            title: Component Id
          description: Filter sessions by component ID (agent/team/workflow ID)
        - name: user_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Filter sessions by user ID
            title: User Id
          description: Filter sessions by user ID
        - name: session_name
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Filter sessions by name (partial match)
            title: Session Name
          description: Filter sessions by name (partial match)
        - name: limit
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Number of sessions to return per page
            default: 20
            title: Limit
          description: Number of sessions to return per page
        - name: page
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Page number for pagination
            default: 1
            title: Page
          description: Page number for pagination
        - name: sort_by
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Field to sort sessions by
            default: created_at
            title: Sort By
          description: Field to sort sessions by
        - name: sort_order
          in: query
          required: false
          schema:
            anyOf:
              - $ref: '#/components/schemas/SortOrder'
              - type: "null"
            description: Sort order (asc or desc)
            default: desc
            title: Sort Order
          description: Sort order (asc or desc)
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to query sessions from
            title: Db Id
          description: Database ID to query sessions from
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_SessionSchema_'
              example:
                data:
                  - session_id: 6f6cfbfd-9643-479a-ae47-b8f32eb4d710
                    session_name: What tools do you have?
                    session_state: {}
                    created_at: "2025-09-05T16:02:09Z"
                    updated_at: "2025-09-05T16:02:09Z"
        "400":
          description: Invalid session type or filter parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation error in query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    delete:
      tags:
        - Sessions
      summary: Delete Multiple Sessions
      description: Delete multiple sessions by their IDs in a single operation. This action cannot be undone and will permanently remove all specified sessions and their runs.
      operationId: delete_sessions
      parameters:
        - name: type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SessionType'
            description: Default session type filter
            default: agent
          description: Default session type filter
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for deletion
            title: Db Id
          description: Database ID to use for deletion
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSessionRequest'
      responses:
        "204":
          description: Sessions deleted successfully
        "400":
          description: Invalid request - session IDs and types length mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to delete sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /sessions/{session_id}:
    get:
      tags:
        - Sessions
      summary: Get Session by ID
      description: Retrieve detailed information about a specific session including metadata, configuration, and run history. Response schema varies based on session type (agent, team, or workflow).
      operationId: get_session_by_id
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            description: Session ID to retrieve
            title: Session Id
          description: Session ID to retrieve
        - name: type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SessionType'
            description: Session type (agent, team, or workflow)
            default: agent
          description: Session type (agent, team, or workflow)
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to query session from
            title: Db Id
          description: Database ID to query session from
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Session details retrieved successfully
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/AgentSessionDetailSchema'
                  - $ref: '#/components/schemas/TeamSessionDetailSchema'
                  - $ref: '#/components/schemas/WorkflowSessionDetailSchema'
                title: Response Get Session By Id
              examples:
                user_id: "123"
                agent_session_id: 6f6cfbfd-9643-479a-ae47-b8f32eb4d710
                session_id: 6f6cfbfd-9643-479a-ae47-b8f32eb4d710
                session_name: What tools do you have?
                session_summary:
                  summary: The user and assistant engaged in a conversation about the tools the agent has available.
                  updated_at: 2025-09-05T18:02:12.269392
                session_state: {}
                agent_id: basic-agent
                total_tokens: 160
                agent_data:
                  name: Basic Agent
                  agent_id: basic-agent
                  model:
                    provider: OpenAI
                    name: OpenAIChat
                    id: gpt-4o
                metrics:
                  input_tokens: 134
                  output_tokens: 26
                  total_tokens: 160
                  audio_input_tokens: 0
                  audio_output_tokens: 0
                  audio_total_tokens: 0
                  cache_read_tokens: 0
                  cache_write_tokens: 0
                  reasoning_tokens: 0
                chat_history:
                  - content: |-
                      <additional_information>
                      - Use markdown to format your answers.
                      - The current time is 2025-09-05 18:02:09.171627.
                      </additional_information>

                      You have access to memories from previous interactions with the user that you can use:

                      <memories_from_previous_interactions>
                      - User really likes Digimon and Japan.
                      - User really likes Japan.
                      - User likes coffee.
                      </memories_from_previous_interactions>

                      Note: this information is from previous interactions and may be updated in this conversation. You should always prefer information from this conversation over the past memories.
                    from_history: false
                    stop_after_tool_call: false
                    role: system
                    created_at: 1757088129
                  - content: What tools do you have?
                    from_history: false
                    stop_after_tool_call: false
                    role: user
                    created_at: 1757088129
                  - content: I don't have access to external tools or the internet. However, I can assist you with a wide range of topics by providing information, answering questions, and offering suggestions based on the knowledge I've been trained on. If there's anything specific you need help with, feel free to ask!
                    from_history: false
                    stop_after_tool_call: false
                    role: assistant
                    metrics:
                      input_tokens: 134
                      output_tokens: 26
                      total_tokens: 160
                    created_at: 1757088129
                created_at: "2025-09-05T16:02:09Z"
                updated_at: "2025-09-05T16:02:09Z"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Invalid session type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    delete:
      tags:
        - Sessions
      summary: Delete Session
      description: Permanently delete a specific session and all its associated runs. This action cannot be undone and will remove all conversation history.
      operationId: delete_session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            description: Session ID to delete
            title: Session Id
          description: Session ID to delete
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for deletion
            title: Db Id
          description: Database ID to use for deletion
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "204":
          description: Successful Response
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to delete session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /sessions/{session_id}/runs:
    get:
      tags:
        - Sessions
      summary: Get Session Runs
      description: Retrieve all runs (executions) for a specific session. Runs represent individual interactions or executions within a session. Response schema varies based on session type.
      operationId: get_session_runs
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            description: Session ID to get runs from
            title: Session Id
          description: Session ID to get runs from
        - name: type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SessionType'
            description: Session type (agent, team, or workflow)
            default: agent
          description: Session type (agent, team, or workflow)
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to query runs from
            title: Db Id
          description: Database ID to query runs from
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Session runs retrieved successfully
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/RunSchema'
                  - type: array
                    items:
                      $ref: '#/components/schemas/TeamRunSchema'
                  - type: array
                    items:
                      $ref: '#/components/schemas/WorkflowRunSchema'
                title: Response Get Session Runs
              examples:
                - run_id: fcdf50f0-7c32-4593-b2ef-68a558774340
                  agent_session_id: 80056af0-c7a5-4d69-b6a2-c3eba9f040e0
                  user_id: ""
                  run_input: Which tools do you have access to?
                  content: I don't have access to external tools or the internet. However, I can assist you with a wide range of topics by providing information, answering questions, and offering suggestions based on the knowledge I've been trained on. If there's anything specific you need help with, feel free to ask!
                  run_response_format: text
                  reasoning_content: ""
                  metrics:
                    input_tokens: 82
                    output_tokens: 56
                    total_tokens: 138
                    time_to_first_token: 0.047505500027909875
                    duration: 4.840060166025069
                  messages:
                    - content: |-
                        <additional_information>
                        - Use markdown to format your answers.
                        - The current time is 2025-09-08 17:52:10.101003.
                        </additional_information>

                        You have the capability to retain memories from previous interactions with the user, but have not had any interactions with the user yet.
                      from_history: false
                      stop_after_tool_call: false
                      role: system
                      created_at: 1757346730
                    - content: Which tools do you have access to?
                      from_history: false
                      stop_after_tool_call: false
                      role: user
                      created_at: 1757346730
                    - content: I don't have access to external tools or the internet. However, I can assist you with a wide range of topics by providing information, answering questions, and offering suggestions based on the knowledge I've been trained on. If there's anything specific you need help with, feel free to ask!
                      from_history: false
                      stop_after_tool_call: false
                      role: assistant
                      metrics:
                        input_tokens: 82
                        output_tokens: 56
                        total_tokens: 138
                      created_at: 1757346730
                  events:
                    - created_at: 1757346730
                      event: RunStarted
                      agent_id: basic-agent
                      agent_name: Basic Agent
                      run_id: fcdf50f0-7c32-4593-b2ef-68a558774340
                      session_id: 80056af0-c7a5-4d69-b6a2-c3eba9f040e0
                      model: gpt-4o
                      model_provider: OpenAI
                    - created_at: 1757346733
                      event: MemoryUpdateStarted
                      agent_id: basic-agent
                      agent_name: Basic Agent
                      run_id: fcdf50f0-7c32-4593-b2ef-68a558774340
                      session_id: 80056af0-c7a5-4d69-b6a2-c3eba9f040e0
                    - created_at: 1757346734
                      event: MemoryUpdateCompleted
                      agent_id: basic-agent
                      agent_name: Basic Agent
                      run_id: fcdf50f0-7c32-4593-b2ef-68a558774340
                      session_id: 80056af0-c7a5-4d69-b6a2-c3eba9f040e0
                    - created_at: 1757346734
                      event: RunCompleted
                      agent_id: basic-agent
                      agent_name: Basic Agent
                      run_id: fcdf50f0-7c32-4593-b2ef-68a558774340
                      session_id: 80056af0-c7a5-4d69-b6a2-c3eba9f040e0
                      content: I don't have access to external tools or the internet. However, I can assist you with a wide range of topics by providing information, answering questions, and offering suggestions based on the knowledge I've been trained on. If there's anything specific you need help with, feel free to ask!
                      content_type: str
                      metrics:
                        input_tokens: 82
                        output_tokens: 56
                        total_tokens: 138
                        time_to_first_token: 0.047505500027909875
                        duration: 4.840060166025069
                  created_at: "2025-09-08T15:52:10Z"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Session not found or has no runs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Invalid session type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /sessions/{session_id}/rename:
    post:
      tags:
        - Sessions
      summary: Rename Session
      description: Update the name of an existing session. Useful for organizing and categorizing sessions with meaningful names for better identification and management.
      operationId: rename_session
      parameters:
        - name: session_id
          in: path
          required: true
          schema:
            type: string
            description: Session ID to rename
            title: Session Id
          description: Session ID to rename
        - name: type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SessionType'
            description: Session type (agent, team, or workflow)
            default: agent
          description: Session type (agent, team, or workflow)
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for rename operation
            title: Db Id
          description: Database ID to use for rename operation
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_rename_session'
      responses:
        "200":
          description: Session renamed successfully
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/AgentSessionDetailSchema'
                  - $ref: '#/components/schemas/TeamSessionDetailSchema'
                  - $ref: '#/components/schemas/WorkflowSessionDetailSchema'
                title: Response Rename Session
              examples:
                user_id: "123"
                agent_session_id: 6f6cfbfd-9643-479a-ae47-b8f32eb4d710
                session_id: 6f6cfbfd-9643-479a-ae47-b8f32eb4d710
                session_name: What tools do you have?
                session_summary:
                  summary: The user and assistant engaged in a conversation about the tools the agent has available.
                  updated_at: 2025-09-05T18:02:12.269392
                session_state: {}
                agent_id: basic-agent
                total_tokens: 160
                agent_data:
                  name: Basic Agent
                  agent_id: basic-agent
                  model:
                    provider: OpenAI
                    name: OpenAIChat
                    id: gpt-4o
                metrics:
                  input_tokens: 134
                  output_tokens: 26
                  total_tokens: 160
                  audio_input_tokens: 0
                  audio_output_tokens: 0
                  audio_total_tokens: 0
                  cache_read_tokens: 0
                  cache_write_tokens: 0
                  reasoning_tokens: 0
                chat_history:
                  - content: |-
                      <additional_information>
                      - Use markdown to format your answers.
                      - The current time is 2025-09-05 18:02:09.171627.
                      </additional_information>

                      You have access to memories from previous interactions with the user that you can use:

                      <memories_from_previous_interactions>
                      - User really likes Digimon and Japan.
                      - User really likes Japan.
                      - User likes coffee.
                      </memories_from_previous_interactions>

                      Note: this information is from previous interactions and may be updated in this conversation. You should always prefer information from this conversation over the past memories.
                    from_history: false
                    stop_after_tool_call: false
                    role: system
                    created_at: 1757088129
                  - content: What tools do you have?
                    from_history: false
                    stop_after_tool_call: false
                    role: user
                    created_at: 1757088129
                  - content: I don't have access to external tools or the internet. However, I can assist you with a wide range of topics by providing information, answering questions, and offering suggestions based on the knowledge I've been trained on. If there's anything specific you need help with, feel free to ask!
                    from_history: false
                    stop_after_tool_call: false
                    role: assistant
                    metrics:
                      input_tokens: 134
                      output_tokens: 26
                      total_tokens: 160
                    created_at: 1757088129
                created_at: "2025-09-05T16:02:09Z"
                updated_at: "2025-09-05T16:02:09Z"
        "400":
          description: Invalid session name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Invalid session type or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /memories:
    post:
      tags:
        - Memory
      summary: Create Memory
      description: Create a new user memory with content and associated topics. Memories are used to store contextual information for users across conversations.
      operationId: create_memory
      parameters:
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for memory storage
            title: Db Id
          description: Database ID to use for memory storage
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMemoryCreateSchema'
      responses:
        "200":
          description: Memory created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMemorySchema'
              example:
                memory_id: mem-123
                memory: User prefers technical explanations with code examples
                topics:
                  - preferences
                  - communication_style
                  - technical
                user_id: user-456
                created_at: "2024-01-15T10:30:00Z"
                updated_at: "2024-01-15T10:30:00Z"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation error in payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to create memory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    delete:
      tags:
        - Memory
      summary: Delete Multiple Memories
      description: Delete multiple user memories by their IDs in a single operation. This action cannot be undone and all specified memories will be permanently removed.
      operationId: delete_memories
      parameters:
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for deletion
            title: Db Id
          description: Database ID to use for deletion
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMemoriesRequest'
      responses:
        "204":
          description: Memories deleted successfully
        "400":
          description: Invalid request - empty memory_ids list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to delete memories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    get:
      tags:
        - Memory
      summary: List Memories
      description: Retrieve paginated list of user memories with filtering and search capabilities. Filter by user, agent, team, topics, or search within memory content.
      operationId: get_memories
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Filter memories by user ID
            title: User Id
          description: Filter memories by user ID
        - name: agent_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Filter memories by agent ID
            title: Agent Id
          description: Filter memories by agent ID
        - name: team_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Filter memories by team ID
            title: Team Id
          description: Filter memories by team ID
        - name: search_content
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Fuzzy search within memory content
            title: Search Content
          description: Fuzzy search within memory content
        - name: limit
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Number of memories to return per page
            default: 20
            title: Limit
          description: Number of memories to return per page
        - name: page
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Page number for pagination
            default: 1
            title: Page
          description: Page number for pagination
        - name: sort_by
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Field to sort memories by
            default: updated_at
            title: Sort By
          description: Field to sort memories by
        - name: sort_order
          in: query
          required: false
          schema:
            anyOf:
              - $ref: '#/components/schemas/SortOrder'
              - type: "null"
            description: Sort order (asc or desc)
            default: desc
            title: Sort Order
          description: Sort order (asc or desc)
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to query memories from
            title: Db Id
          description: Database ID to query memories from
        - name: topics
          in: query
          required: false
          schema:
            anyOf:
              - type: array
                items:
                  type: string
              - type: "null"
            description: Comma-separated list of topics to filter by
            title: Topics
          description: Comma-separated list of topics to filter by
          example:
            - preferences,technical,communication_style
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Memories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_UserMemorySchema_'
              example:
                data:
                  - memory_id: f9361a69-2997-40c7-ae4e-a5861d434047
                    memory: User likes coffee.
                    topics:
                      - preferences
                    user_id: "123"
                    updated_at: "2025-09-01T07:53:17Z"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /memories/{memory_id}:
    delete:
      tags:
        - Memory
      summary: Delete Memory
      description: Permanently delete a specific user memory. This action cannot be undone.
      operationId: delete_memory
      parameters:
        - name: memory_id
          in: path
          required: true
          schema:
            type: string
            description: Memory ID to delete
            title: Memory Id
          description: Memory ID to delete
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for deletion
            title: Db Id
          description: Database ID to use for deletion
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "204":
          description: Memory deleted successfully
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Memory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to delete memory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    get:
      tags:
        - Memory
      summary: Get Memory by ID
      description: Retrieve detailed information about a specific user memory by its ID.
      operationId: get_memory
      parameters:
        - name: memory_id
          in: path
          required: true
          schema:
            type: string
            description: Memory ID to retrieve
            title: Memory Id
          description: Memory ID to retrieve
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to query memory from
            title: Db Id
          description: Database ID to query memory from
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Memory retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMemorySchema'
              example:
                memory_id: f9361a69-2997-40c7-ae4e-a5861d434047
                memory: User likes coffee.
                topics:
                  - preferences
                user_id: "123"
                updated_at: "2025-09-01T07:53:17Z"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Memory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    patch:
      tags:
        - Memory
      summary: Update Memory
      description: Update an existing user memory's content and topics. Replaces the entire memory content and topic list with the provided values.
      operationId: update_memory
      parameters:
        - name: memory_id
          in: path
          required: true
          schema:
            type: string
            description: Memory ID to update
            title: Memory Id
          description: Memory ID to update
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for update
            title: Db Id
          description: Database ID to use for update
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMemoryCreateSchema'
      responses:
        "200":
          description: Memory updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMemorySchema'
              example:
                memory_id: f9361a69-2997-40c7-ae4e-a5861d434047
                memory: User likes coffee.
                topics:
                  - preferences
                user_id: "123"
                updated_at: "2025-09-01T07:53:17Z"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Memory not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation error in payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to update memory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /memory_topics:
    get:
      tags:
        - Memory
      summary: Get Memory Topics
      description: Retrieve all unique topics associated with memories in the system. Useful for filtering and categorizing memories by topic.
      operationId: get_memory_topics
      parameters:
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to query topics from
            title: Db Id
          description: Database ID to query topics from
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Memory topics retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                title: Response Get Memory Topics
              example:
                - preferences
                - communication_style
                - technical
                - industry
                - compliance
                - code_examples
                - requirements
                - healthcare
                - finance
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /user_memory_stats:
    get:
      tags:
        - Memory
      summary: Get User Memory Statistics
      description: Retrieve paginated statistics about memory usage by user. Provides insights into user engagement and memory distribution across users.
      operationId: get_user_memory_stats
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Number of user statistics to return per page
            default: 20
            title: Limit
          description: Number of user statistics to return per page
        - name: page
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Page number for pagination
            default: 1
            title: Page
          description: Page number for pagination
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to query statistics from
            title: Db Id
          description: Database ID to query statistics from
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: User memory statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_UserStatsSchema_'
              example:
                data:
                  - user_id: "123"
                    total_memories: 3
                    last_memory_updated_at: "2025-09-01T07:53:17Z"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to retrieve user statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /eval-runs:
    get:
      tags:
        - Evals
      summary: List Evaluation Runs
      description: Retrieve paginated evaluation runs with filtering and sorting options. Filter by agent, team, workflow, model, or evaluation type.
      operationId: get_eval_runs
      parameters:
        - name: agent_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Agent ID
            title: Agent Id
          description: Agent ID
        - name: team_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Team ID
            title: Team Id
          description: Team ID
        - name: workflow_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Workflow ID
            title: Workflow Id
          description: Workflow ID
        - name: model_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Model ID
            title: Model Id
          description: Model ID
        - name: type
          in: query
          required: false
          schema:
            anyOf:
              - $ref: '#/components/schemas/EvalFilterType'
              - type: "null"
            description: Filter type
            title: Type
          description: Filter type
        - name: limit
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Number of eval runs to return
            default: 20
            title: Limit
          description: Number of eval runs to return
        - name: page
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Page number
            default: 1
            title: Page
          description: Page number
        - name: sort_by
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Field to sort by
            default: created_at
            title: Sort By
          description: Field to sort by
        - name: sort_order
          in: query
          required: false
          schema:
            anyOf:
              - $ref: '#/components/schemas/SortOrder'
              - type: "null"
            description: Sort order (asc or desc)
            default: desc
            title: Sort Order
          description: Sort order (asc or desc)
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: eval_types
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Comma-separated eval types (accuracy,performance,reliability)
            title: Eval Types
          description: Comma-separated eval types (accuracy,performance,reliability)
          example: accuracy,performance
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Evaluation runs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_EvalSchema_'
              example:
                data:
                  - id: a03fa2f4-900d-482d-afe0-470d4cd8d1f4
                    agent_id: basic-agent
                    model_id: gpt-4o
                    model_provider: OpenAI
                    name: 'Test '
                    eval_type: reliability
                    eval_data:
                      eval_status: PASSED
                      failed_tool_calls: []
                      passed_tool_calls:
                        - multiply
                    eval_input:
                      expected_tool_calls:
                        - multiply
                    created_at: "2025-08-27T15:41:59Z"
                    updated_at: "2025-08-27T15:41:59Z"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    delete:
      tags:
        - Evals
      summary: Delete Evaluation Runs
      description: Delete multiple evaluation runs by their IDs. This action cannot be undone.
      operationId: delete_eval_runs
      parameters:
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for deletion
            title: Db Id
          description: Database ID to use for deletion
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEvalRunsRequest'
      responses:
        "204":
          description: Successful Response
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to delete evaluation runs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    post:
      tags:
        - Evals
      summary: Execute Evaluation
      description: Run evaluation tests on agents or teams. Supports accuracy, performance, and reliability evaluations. Requires either agent_id or team_id, but not both.
      operationId: run_eval
      parameters:
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for evaluation
            title: Db Id
          description: Database ID to use for evaluation
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvalRunInput'
      responses:
        "200":
          description: Evaluation executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvalSchema'
              example:
                id: f2b2d72f-e9e2-4f0e-8810-0a7e1ff58614
                agent_id: basic-agent
                model_id: gpt-4o
                model_provider: OpenAI
                eval_type: reliability
                eval_data:
                  eval_status: PASSED
                  failed_tool_calls: []
                  passed_tool_calls:
                    - multiply
                created_at: "2025-08-27T15:41:59Z"
                updated_at: "2025-08-27T15:41:59Z"
        "400":
          description: Invalid request - provide either agent_id or team_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Agent or team not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /eval-runs/{eval_run_id}:
    get:
      tags:
        - Evals
      summary: Get Evaluation Run
      description: Retrieve detailed results and metrics for a specific evaluation run.
      operationId: get_eval_run
      parameters:
        - name: eval_run_id
          in: path
          required: true
          schema:
            type: string
            title: Eval Run Id
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Evaluation run details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvalSchema'
              example:
                id: a03fa2f4-900d-482d-afe0-470d4cd8d1f4
                agent_id: basic-agent
                model_id: gpt-4o
                model_provider: OpenAI
                name: 'Test '
                eval_type: reliability
                eval_data:
                  eval_status: PASSED
                  failed_tool_calls: []
                  passed_tool_calls:
                    - multiply
                eval_input:
                  expected_tool_calls:
                    - multiply
                created_at: "2025-08-27T15:41:59Z"
                updated_at: "2025-08-27T15:41:59Z"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Evaluation run not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    patch:
      tags:
        - Evals
      summary: Update Evaluation Run
      description: Update the name or other properties of an existing evaluation run.
      operationId: update_eval_run
      parameters:
        - name: eval_run_id
          in: path
          required: true
          schema:
            type: string
            title: Eval Run Id
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEvalRunRequest'
      responses:
        "200":
          description: Evaluation run updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvalSchema'
              example:
                id: a03fa2f4-900d-482d-afe0-470d4cd8d1f4
                agent_id: basic-agent
                model_id: gpt-4o
                model_provider: OpenAI
                name: 'Test '
                eval_type: reliability
                eval_data:
                  eval_status: PASSED
                  failed_tool_calls: []
                  passed_tool_calls:
                    - multiply
                eval_input:
                  expected_tool_calls:
                    - multiply
                created_at: "2025-08-27T15:41:59Z"
                updated_at: "2025-08-27T15:41:59Z"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Evaluation run not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to update evaluation run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /metrics:
    get:
      tags:
        - Metrics
      summary: Get System Metrics
      description: Retrieve system metrics and analytics data for a specified date range. Provides insights into system usage, performance, and user activity patterns. If no date range is specified, returns all available metrics.
      operationId: get_metrics
      parameters:
        - name: starting_date
          in: query
          required: false
          schema:
            anyOf:
              - type: string
                format: date
              - type: "null"
            description: Starting date for metrics range (YYYY-MM-DD format)
            title: Starting Date
          description: Starting date for metrics range (YYYY-MM-DD format)
        - name: ending_date
          in: query
          required: false
          schema:
            anyOf:
              - type: string
                format: date
              - type: "null"
            description: Ending date for metrics range (YYYY-MM-DD format)
            title: Ending Date
          description: Ending date for metrics range (YYYY-MM-DD format)
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to query metrics from
            title: Db Id
          description: Database ID to query metrics from
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'
              example:
                metrics:
                  - id: 7bf39658-a00a-484c-8a28-67fd8a9ddb2a
                    agent_runs_count: 5
                    agent_sessions_count: 5
                    team_runs_count: 0
                    team_sessions_count: 0
                    workflow_runs_count: 0
                    workflow_sessions_count: 0
                    users_count: 1
                    token_metrics:
                      input_tokens: 448
                      output_tokens: 148
                      total_tokens: 596
                      audio_tokens: 0
                      input_audio_tokens: 0
                      output_audio_tokens: 0
                      cached_tokens: 0
                      cache_write_tokens: 0
                      reasoning_tokens: 0
                    model_metrics:
                      - model_id: gpt-4o
                        model_provider: OpenAI
                        count: 5
                    date: 2025-07-31T00:00:00
                    created_at: 1753993132
                    updated_at: 1753993741
        "400":
          description: Invalid date range parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to retrieve metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /metrics/refresh:
    post:
      tags:
        - Metrics
      summary: Refresh Metrics
      description: Manually trigger recalculation of system metrics from raw data. This operation analyzes system activity logs and regenerates aggregated metrics. Useful for ensuring metrics are up-to-date or after system maintenance.
      operationId: refresh_metrics
      parameters:
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for metrics calculation
            title: Db Id
          description: Database ID to use for metrics calculation
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Metrics refreshed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DayAggregatedMetrics'
                title: Response Refresh Metrics
              example:
                - id: e77c9531-818b-47a5-99cd-59fed61e5403
                  agent_runs_count: 2
                  agent_sessions_count: 2
                  team_runs_count: 0
                  team_sessions_count: 0
                  workflow_runs_count: 0
                  workflow_sessions_count: 0
                  users_count: 1
                  token_metrics:
                    input_tokens: 256
                    output_tokens: 441
                    total_tokens: 697
                    audio_total_tokens: 0
                    audio_input_tokens: 0
                    audio_output_tokens: 0
                    cache_read_tokens: 0
                    cache_write_tokens: 0
                    reasoning_tokens: 0
                  model_metrics:
                    - model_id: gpt-4o
                      model_provider: OpenAI
                      count: 2
                  date: 2025-08-12T00:00:00
                  created_at: 1755016907
                  updated_at: 1755016907
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to refresh metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /knowledge/content:
    post:
      tags:
        - Knowledge
      summary: Upload Content
      description: Upload content to the knowledge base. Supports file uploads, text content, or URLs. Content is processed asynchronously in the background. Supports custom readers and chunking strategies.
      operationId: upload_content
      parameters:
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Database ID to use for content storage
            title: Db Id
          description: Database ID to use for content storage
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_content'
      responses:
        "202":
          description: Content upload accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponseSchema'
              example:
                id: content-123
                name: example-document.pdf
                description: Sample document for processing
                metadata:
                  category: documentation
                  priority: high
                status: processing
        "400":
          description: Invalid request - malformed metadata or missing content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation error in form data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    get:
      tags:
        - Knowledge
      summary: List Content
      description: Retrieve paginated list of all content in the knowledge base with filtering and sorting options. Filter by status, content type, or metadata properties.
      operationId: get_content
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Number of content entries to return
            default: 20
            title: Limit
          description: Number of content entries to return
        - name: page
          in: query
          required: false
          schema:
            anyOf:
              - type: integer
              - type: "null"
            description: Page number
            default: 1
            title: Page
          description: Page number
        - name: sort_by
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: Field to sort by
            default: created_at
            title: Sort By
          description: Field to sort by
        - name: sort_order
          in: query
          required: false
          schema:
            anyOf:
              - $ref: '#/components/schemas/SortOrder'
              - type: "null"
            description: Sort order (asc or desc)
            default: desc
            title: Sort Order
          description: Sort order (asc or desc)
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Content list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse_ContentResponseSchema_'
              example:
                data:
                  - id: 3c2fc685-d451-4d47-b0c0-b9a544c672b7
                    name: example.pdf
                    description: ""
                    type: application/pdf
                    size: "251261"
                    metadata: {}
                    access_count: 1
                    status: completed
                    status_message: ""
                    created_at: "2025-09-08T15:22:53Z"
                    updated_at: "2025-09-08T15:22:54Z"
                meta:
                  page: 1
                  limit: 20
                  total_pages: 1
                  total_count: 2
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    delete:
      tags:
        - Knowledge
      summary: Delete All Content
      description: Permanently remove all content from the knowledge base. This is a destructive operation that cannot be undone. Use with extreme caution.
      operationId: delete_all_content
      parameters:
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to delete all content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /knowledge/content/{content_id}:
    patch:
      tags:
        - Knowledge
      summary: Update Content
      description: Update content properties such as name, description, metadata, or processing configuration. Allows modification of existing content without re-uploading.
      operationId: update_content
      parameters:
        - name: content_id
          in: path
          required: true
          schema:
            type: string
            description: Content ID
            title: Content Id
          description: Content ID
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_update_content'
      responses:
        "200":
          description: Content updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponseSchema'
              example:
                id: 3c2fc685-d451-4d47-b0c0-b9a544c672b7
                name: example.pdf
                description: ""
                type: application/pdf
                size: "251261"
                metadata: {}
                access_count: 1
                status: completed
                status_message: ""
                created_at: "2025-09-08T15:22:53Z"
                updated_at: "2025-09-08T15:22:54Z"
        "400":
          description: Invalid request - malformed metadata or invalid reader_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    get:
      tags:
        - Knowledge
      summary: Get Content by ID
      description: Retrieve detailed information about a specific content item including processing status and metadata.
      operationId: get_content_by_id
      parameters:
        - name: content_id
          in: path
          required: true
          schema:
            type: string
            title: Content Id
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Content details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponseSchema'
              example:
                id: 3c2fc685-d451-4d47-b0c0-b9a544c672b7
                name: example.pdf
                description: ""
                type: application/pdf
                size: "251261"
                metadata: {}
                access_count: 1
                status: completed
                status_message: ""
                created_at: "2025-09-08T15:22:53Z"
                updated_at: "2025-09-08T15:22:54Z"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
    delete:
      tags:
        - Knowledge
      summary: Delete Content by ID
      description: Permanently remove a specific content item from the knowledge base. This action cannot be undone.
      operationId: delete_content_by_id
      parameters:
        - name: content_id
          in: path
          required: true
          schema:
            type: string
            title: Content Id
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponseSchema'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Failed to delete content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /knowledge/content/{content_id}/status:
    get:
      tags:
        - Knowledge
      summary: Get Content Status
      description: Retrieve the current processing status of a content item. Useful for monitoring asynchronous content processing progress and identifying any processing errors.
      operationId: get_content_status
      parameters:
        - name: content_id
          in: path
          required: true
          schema:
            type: string
            title: Content Id
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Content status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentStatusResponse'
              examples:
                status: completed
                status_message: ""
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Content not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /knowledge/config:
    get:
      tags:
        - Knowledge
      summary: Get Knowledge Configuration
      description: Retrieve available readers, chunkers, and configuration options for content processing. This endpoint provides metadata about supported file types, processing strategies, and filters.
      operationId: get_knowledge_config
      parameters:
        - name: db_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            description: The ID of the database to use
            title: Db Id
          description: The ID of the database to use
        - name: authorization
          in: header
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Authorization
      responses:
        "200":
          description: Knowledge configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponseSchema'
              example:
                readers:
                  website:
                    id: website
                    name: WebsiteReader
                    description: Reads website files
                    chunkers:
                      - AgenticChunker
                      - DocumentChunker
                      - RecursiveChunker
                      - SemanticChunker
                      - FixedSizeChunker
                  firecrawl:
                    id: firecrawl
                    name: FirecrawlReader
                    description: Reads firecrawl files
                    chunkers:
                      - SemanticChunker
                      - FixedSizeChunker
                      - AgenticChunker
                      - DocumentChunker
                      - RecursiveChunker
                  youtube:
                    id: youtube
                    name: YoutubeReader
                    description: Reads youtube files
                    chunkers:
                      - RecursiveChunker
                      - AgenticChunker
                      - DocumentChunker
                      - SemanticChunker
                      - FixedSizeChunker
                  web_search:
                    id: web_search
                    name: WebSearchReader
                    description: Reads web_search files
                    chunkers:
                      - AgenticChunker
                      - DocumentChunker
                      - RecursiveChunker
                      - SemanticChunker
                      - FixedSizeChunker
                  arxiv:
                    id: arxiv
                    name: ArxivReader
                    description: Reads arxiv files
                    chunkers:
                      - FixedSizeChunker
                      - AgenticChunker
                      - DocumentChunker
                      - RecursiveChunker
                      - SemanticChunker
                  csv:
                    id: csv
                    name: CsvReader
                    description: Reads csv files
                    chunkers:
                      - RowChunker
                      - FixedSizeChunker
                      - AgenticChunker
                      - DocumentChunker
                      - RecursiveChunker
                  docx:
                    id: docx
                    name: DocxReader
                    description: Reads docx files
                    chunkers:
                      - DocumentChunker
                      - FixedSizeChunker
                      - SemanticChunker
                      - AgenticChunker
                      - RecursiveChunker
                  json:
                    id: json
                    name: JsonReader
                    description: Reads json files
                    chunkers:
                      - FixedSizeChunker
                      - AgenticChunker
                      - DocumentChunker
                      - RecursiveChunker
                      - SemanticChunker
                  markdown:
                    id: markdown
                    name: MarkdownReader
                    description: Reads markdown files
                    chunkers:
                      - MarkdownChunker
                      - DocumentChunker
                      - AgenticChunker
                      - RecursiveChunker
                      - SemanticChunker
                      - FixedSizeChunker
                  pdf:
                    id: pdf
                    name: PdfReader
                    description: Reads pdf files
                    chunkers:
                      - DocumentChunker
                      - FixedSizeChunker
                      - AgenticChunker
                      - SemanticChunker
                      - RecursiveChunker
                  text:
                    id: text
                    name: TextReader
                    description: Reads text files
                    chunkers:
                      - FixedSizeChunker
                      - AgenticChunker
                      - DocumentChunker
                      - RecursiveChunker
                      - SemanticChunker
                readersForType:
                  url:
                    - url
                    - website
                    - firecrawl
                    - youtube
                    - web_search
                    - gcs
                  youtube:
                    - youtube
                  text:
                    - web_search
                  topic:
                    - arxiv
                  file:
                    - csv
                    - gcs
                  .csv:
                    - csv
                  .xlsx:
                    - csv
                  .xls:
                    - csv
                  .docx:
                    - docx
                  .doc:
                    - docx
                  .json:
                    - json
                  .md:
                    - markdown
                  .pdf:
                    - pdf
                  .txt:
                    - text
                chunkers:
                  AgenticChunker:
                    key: AgenticChunker
                    name: AgenticChunker
                    description: Chunking strategy that uses an LLM to determine natural breakpoints in the text
                  DocumentChunker:
                    key: DocumentChunker
                    name: DocumentChunker
                    description: A chunking strategy that splits text based on document structure like paragraphs and sections
                  RecursiveChunker:
                    key: RecursiveChunker
                    name: RecursiveChunker
                    description: Chunking strategy that recursively splits text into chunks by finding natural break points
                  SemanticChunker:
                    key: SemanticChunker
                    name: SemanticChunker
                    description: Chunking strategy that splits text into semantic chunks using chonkie
                  FixedSizeChunker:
                    key: FixedSizeChunker
                    name: FixedSizeChunker
                    description: Chunking strategy that splits text into fixed-size chunks with optional overlap
                  RowChunker:
                    key: RowChunker
                    name: RowChunker
                    description: RowChunking chunking strategy
                  MarkdownChunker:
                    key: MarkdownChunker
                    name: MarkdownChunker
                    description: A chunking strategy that splits markdown based on structure like headers, paragraphs and sections
                filters:
                  - filter_tag_1
                  - filter_tag2
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /a2a/message/send:
    post:
      tags:
        - A2A
      summary: Run an Agent, Team, or Workflow via A2A (via A2A Protocol)
      description: Run an Agent, Team, or Workflow. The Agent, Team or Workflow is identified via the 'agentId' field in params.message or X-Agent-ID header. Optional - Pass user ID via X-User-ID header (recommended) or 'userId' in params.message.metadata.
      operationId: send_message
      parameters:
        - name: X-Agent-ID
          in: header
          required: false
          schema:
            type: string
          description: Agent, Team, or Workflow ID. Can also be provided in the request body as params.message.agentId
        - name: X-User-ID
          in: header
          required: false
          schema:
            type: string
          description: User ID. Can also be provided in the request body as params.message.metadata.userId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jsonrpc
                - method
                - params
              properties:
                jsonrpc:
                  type: string
                  example: "2.0"
                id:
                  type: string
                  example: "request-123"
                method:
                  type: string
                  example: "message/send"
                params:
                  type: object
                  required:
                    - message
                  properties:
                    message:
                      $ref: '#/components/schemas/A2AMessage'
      responses:
        "200":
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jsonrpc:
                    type: string
                    example: "2.0"
                  id:
                    type: string
                  result:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Task ID
                      context_id:
                        type: string
                        description: Context/Session ID
                      status:
                        type: object
                        properties:
                          state:
                            type: string
                            enum: [completed, failed, working]
                      history:
                        type: array
                        items:
                          type: object
                          properties:
                            message_id:
                              type: string
                            role:
                              type: string
                              enum: [agent, user]
                            parts:
                              type: array
                              items:
                                type: object
              example:
                jsonrpc: "2.0"
                id: "request-123"
                result:
                  task:
                    id: "task-456"
                    context_id: "context-789"
                    status: "completed"
                    history:
                      - message_id: "msg-1"
                        role: "agent"
                        parts:
                          - kind: "text"
                            text: "Response from agent"
        "400":
          description: Invalid request or unsupported method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "404":
          description: Agent, Team, or Workflow not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
  /a2a/message/stream:
    post:
      tags:
        - A2A
      summary: Run an Agent, Team or Workflow via A2A (via A2A Protocol) streaming the response.
      description: Run an Agent, Team, or Workflow. The Agent, Team or Workflow is identified via the 'agentId' field in params.message or X-Agent-ID header. Optional - Pass user ID via X-User-ID header (recommended) or 'userId' in params.message.metadata. Returns real-time updates as newline-delimited JSON (NDJSON).
      operationId: stream_message
      parameters:
        - name: X-Agent-ID
          in: header
          required: false
          schema:
            type: string
          description: Agent, Team, or Workflow ID. Can also be provided in the request body as params.message.agentId
        - name: X-User-ID
          in: header
          required: false
          schema:
            type: string
          description: User ID. Can also be provided in the request body as params.message.metadata.userId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jsonrpc
                - method
                - params
              properties:
                jsonrpc:
                  type: string
                  example: "2.0"
                id:
                  type: string
                  example: "request-123"
                method:
                  type: string
                  example: "message/stream"
                params:
                  type: object
                  required:
                    - message
                  properties:
                    message:
                      $ref: '#/components/schemas/A2AMessage'
      responses:
        "200":
          description: Streaming response with task updates
          content:
            application/x-ndjson:
              schema:
                type: string
                description: Newline-delimited JSON stream
              example: |
                {"jsonrpc":"2.0","id":"request-123","result":{"taskId":"task-456","status":"working"}}
                {"jsonrpc":"2.0","id":"request-123","result":{"messageId":"msg-1","role":"agent","parts":[{"kind":"text","text":"Response"}]}}
        "400":
          description: Invalid request or unsupported method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        "404":
          description: Agent, Team, or Workflow not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerErrorResponse'
components:
  schemas:
    AgentResponse:
      properties:
        id:
          anyOf:
            - type: string
            - type: "null"
          title: Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        db_id:
          anyOf:
            - type: string
            - type: "null"
          title: Db Id
        model:
          anyOf:
            - $ref: '#/components/schemas/ModelResponse'
            - type: "null"
        tools:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Tools
        sessions:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Sessions
        knowledge:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Knowledge
        memory:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Memory
        reasoning:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Reasoning
        default_tools:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Default Tools
        system_message:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: System Message
        extra_messages:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Extra Messages
        response_settings:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Response Settings
        streaming:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Streaming
        metadata:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metadata
      type: object
      title: AgentResponse
    AgentSessionDetailSchema:
      properties:
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
        agent_session_id:
          type: string
          title: Agent Session Id
        session_id:
          type: string
          title: Session Id
        session_name:
          type: string
          title: Session Name
        session_summary:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Session Summary
        session_state:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Session State
        agent_id:
          anyOf:
            - type: string
            - type: "null"
          title: Agent Id
        total_tokens:
          anyOf:
            - type: integer
            - type: "null"
          title: Total Tokens
        agent_data:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Agent Data
        metrics:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metrics
        chat_history:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Chat History
        created_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Created At
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Updated At
      type: object
      required:
        - user_id
        - agent_session_id
        - session_id
        - session_name
        - session_summary
        - session_state
        - agent_id
        - total_tokens
        - agent_data
        - metrics
        - chat_history
        - created_at
        - updated_at
      title: AgentSessionDetailSchema
    AgentSummaryResponse:
      properties:
        id:
          anyOf:
            - type: string
            - type: "null"
          title: Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
        db_id:
          anyOf:
            - type: string
            - type: "null"
          title: Db Id
      type: object
      title: AgentSummaryResponse
    BadRequestResponse:
      properties:
        detail:
          type: string
          title: Detail
        error_code:
          anyOf:
            - type: string
            - type: "null"
          title: Error Code
      type: object
      required:
        - detail
      title: BadRequestResponse
      example:
        detail: Bad request
        error_code: BAD_REQUEST
    Body_continue_agent_run:
      properties:
        tools:
          type: string
          title: Tools
        session_id:
          anyOf:
            - type: string
            - type: "null"
          title: Session Id
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
        stream:
          type: boolean
          title: Stream
          default: true
      type: object
      required:
        - tools
      title: Body_continue_agent_run
    Body_create_agent_run:
      properties:
        message:
          type: string
          title: Message
        stream:
          type: boolean
          title: Stream
          default: false
        session_id:
          anyOf:
            - type: string
            - type: "null"
          title: Session Id
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
        files:
          anyOf:
            - items:
                type: string
                format: binary
              type: array
            - type: "null"
          title: Files
      type: object
      required:
        - message
      title: Body_create_agent_run
    Body_create_team_run:
      properties:
        message:
          type: string
          title: Message
        stream:
          type: boolean
          title: Stream
          default: true
        monitor:
          type: boolean
          title: Monitor
          default: true
        session_id:
          anyOf:
            - type: string
            - type: "null"
          title: Session Id
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
        files:
          anyOf:
            - items:
                type: string
                format: binary
              type: array
            - type: "null"
          title: Files
      type: object
      required:
        - message
      title: Body_create_team_run
    Body_create_workflow_run:
      properties:
        message:
          type: string
          title: Message
        stream:
          type: boolean
          title: Stream
          default: true
        session_id:
          anyOf:
            - type: string
            - type: "null"
          title: Session Id
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
      type: object
      required:
        - message
      title: Body_create_workflow_run
    Body_rename_session:
      properties:
        session_name:
          type: string
          title: Session Name
          description: New name for the session
      type: object
      required:
        - session_name
      title: Body_rename_session
    Body_update_content:
      properties:
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
          description: Content name
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
          description: Content description
        metadata:
          anyOf:
            - type: string
            - type: "null"
          title: Metadata
          description: Content metadata as JSON string
        reader_id:
          anyOf:
            - type: string
            - type: "null"
          title: Reader Id
          description: ID of the reader to use for processing
      type: object
      title: Body_update_content
    Body_upload_content:
      properties:
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
          description: Content name (auto-generated from file/URL if not provided)
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
          description: Content description for context
        url:
          anyOf:
            - type: string
            - type: "null"
          title: Url
          description: URL to fetch content from (JSON array or single URL string)
        metadata:
          anyOf:
            - type: string
            - type: "null"
          title: Metadata
          description: JSON metadata object for additional content properties
        file:
          anyOf:
            - type: string
              format: binary
            - type: "null"
          title: File
          description: File to upload for processing
        text_content:
          anyOf:
            - type: string
            - type: "null"
          title: Text Content
          description: Raw text content to process
        reader_id:
          anyOf:
            - type: string
            - type: "null"
          title: Reader Id
          description: ID of the reader to use for content processing
        chunker:
          anyOf:
            - type: string
            - type: "null"
          title: Chunker
          description: Chunking strategy to apply during processing
      type: object
      title: Body_upload_content
    ChatConfig:
      properties:
        quick_prompts:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
          title: Quick Prompts
      type: object
      required:
        - quick_prompts
      title: ChatConfig
      description: Configuration for the Chat page of the AgentOS
    ChunkerSchema:
      properties:
        key:
          type: string
          title: Key
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
      type: object
      required:
        - key
      title: ChunkerSchema
    ConfigResponse:
      properties:
        os_id:
          type: string
          title: Os Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
        available_models:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Available Models
        databases:
          items:
            type: string
          type: array
          title: Databases
        chat:
          anyOf:
            - $ref: '#/components/schemas/ChatConfig'
            - type: "null"
        session:
          anyOf:
            - $ref: '#/components/schemas/SessionConfig'
            - type: "null"
        metrics:
          anyOf:
            - $ref: '#/components/schemas/MetricsConfig'
            - type: "null"
        memory:
          anyOf:
            - $ref: '#/components/schemas/MemoryConfig'
            - type: "null"
        knowledge:
          anyOf:
            - $ref: '#/components/schemas/KnowledgeConfig'
            - type: "null"
        evals:
          anyOf:
            - $ref: '#/components/schemas/EvalsConfig'
            - type: "null"
        agents:
          items:
            $ref: '#/components/schemas/AgentSummaryResponse'
          type: array
          title: Agents
        teams:
          items:
            $ref: '#/components/schemas/TeamSummaryResponse'
          type: array
          title: Teams
        workflows:
          items:
            $ref: '#/components/schemas/WorkflowSummaryResponse'
          type: array
          title: Workflows
        interfaces:
          items:
            $ref: '#/components/schemas/InterfaceResponse'
          type: array
          title: Interfaces
      type: object
      required:
        - os_id
        - databases
        - agents
        - teams
        - workflows
        - interfaces
      title: ConfigResponse
      description: Response schema for the general config endpoint
    ConfigResponseSchema:
      properties:
        readers:
          anyOf:
            - additionalProperties:
                $ref: '#/components/schemas/ReaderSchema'
              type: object
            - type: "null"
          title: Readers
        readersForType:
          anyOf:
            - additionalProperties:
                items:
                  type: string
                type: array
              type: object
            - type: "null"
          title: Readersfortype
        chunkers:
          anyOf:
            - additionalProperties:
                $ref: '#/components/schemas/ChunkerSchema'
              type: object
            - type: "null"
          title: Chunkers
        filters:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Filters
      type: object
      title: ConfigResponseSchema
    ContentResponseSchema:
      properties:
        id:
          type: string
          title: Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
        type:
          anyOf:
            - type: string
            - type: "null"
          title: Type
        size:
          anyOf:
            - type: string
            - type: "null"
          title: Size
        linked_to:
          anyOf:
            - type: string
            - type: "null"
          title: Linked To
        metadata:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metadata
        access_count:
          anyOf:
            - type: integer
            - type: "null"
          title: Access Count
        status:
          anyOf:
            - $ref: '#/components/schemas/ContentStatus'
            - type: "null"
        status_message:
          anyOf:
            - type: string
            - type: "null"
          title: Status Message
        created_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Created At
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Updated At
      type: object
      required:
        - id
      title: ContentResponseSchema
    ContentStatus:
      type: string
      enum:
        - processing
        - completed
        - failed
      title: ContentStatus
      description: Enumeration of possible content processing statuses.
    ContentStatusResponse:
      properties:
        status:
          $ref: '#/components/schemas/ContentStatus'
        status_message:
          type: string
          title: Status Message
          default: ""
      type: object
      required:
        - status
      title: ContentStatusResponse
      description: Response model for content status endpoint.
    DatabaseConfig_EvalsDomainConfig_:
      properties:
        db_id:
          type: string
          title: Db Id
        domain_config:
          anyOf:
            - $ref: '#/components/schemas/EvalsDomainConfig'
            - type: "null"
      type: object
      required:
        - db_id
      title: DatabaseConfig[EvalsDomainConfig]
    DatabaseConfig_KnowledgeDomainConfig_:
      properties:
        db_id:
          type: string
          title: Db Id
        domain_config:
          anyOf:
            - $ref: '#/components/schemas/KnowledgeDomainConfig'
            - type: "null"
      type: object
      required:
        - db_id
      title: DatabaseConfig[KnowledgeDomainConfig]
    DatabaseConfig_MemoryDomainConfig_:
      properties:
        db_id:
          type: string
          title: Db Id
        domain_config:
          anyOf:
            - $ref: '#/components/schemas/MemoryDomainConfig'
            - type: "null"
      type: object
      required:
        - db_id
      title: DatabaseConfig[MemoryDomainConfig]
    DatabaseConfig_MetricsDomainConfig_:
      properties:
        db_id:
          type: string
          title: Db Id
        domain_config:
          anyOf:
            - $ref: '#/components/schemas/MetricsDomainConfig'
            - type: "null"
      type: object
      required:
        - db_id
      title: DatabaseConfig[MetricsDomainConfig]
    DatabaseConfig_SessionDomainConfig_:
      properties:
        db_id:
          type: string
          title: Db Id
        domain_config:
          anyOf:
            - $ref: '#/components/schemas/SessionDomainConfig'
            - type: "null"
      type: object
      required:
        - db_id
      title: DatabaseConfig[SessionDomainConfig]
    DayAggregatedMetrics:
      properties:
        id:
          type: string
          title: Id
        agent_runs_count:
          type: integer
          title: Agent Runs Count
        agent_sessions_count:
          type: integer
          title: Agent Sessions Count
        team_runs_count:
          type: integer
          title: Team Runs Count
        team_sessions_count:
          type: integer
          title: Team Sessions Count
        workflow_runs_count:
          type: integer
          title: Workflow Runs Count
        workflow_sessions_count:
          type: integer
          title: Workflow Sessions Count
        users_count:
          type: integer
          title: Users Count
        token_metrics:
          additionalProperties: true
          type: object
          title: Token Metrics
        model_metrics:
          items:
            additionalProperties: true
            type: object
          type: array
          title: Model Metrics
        date:
          type: string
          format: date-time
          title: Date
        created_at:
          type: integer
          title: Created At
        updated_at:
          type: integer
          title: Updated At
      type: object
      required:
        - id
        - agent_runs_count
        - agent_sessions_count
        - team_runs_count
        - team_sessions_count
        - workflow_runs_count
        - workflow_sessions_count
        - users_count
        - token_metrics
        - model_metrics
        - date
        - created_at
        - updated_at
      title: DayAggregatedMetrics
      description: Aggregated metrics for a given day
    DeleteEvalRunsRequest:
      properties:
        eval_run_ids:
          items:
            type: string
          type: array
          title: Eval Run Ids
      type: object
      required:
        - eval_run_ids
      title: DeleteEvalRunsRequest
    DeleteMemoriesRequest:
      properties:
        memory_ids:
          items:
            type: string
          type: array
          title: Memory Ids
      type: object
      required:
        - memory_ids
      title: DeleteMemoriesRequest
    DeleteSessionRequest:
      properties:
        session_ids:
          items:
            type: string
          type: array
          title: Session Ids
        session_types:
          items:
            $ref: '#/components/schemas/SessionType'
          type: array
          title: Session Types
      type: object
      required:
        - session_ids
        - session_types
      title: DeleteSessionRequest
    EvalFilterType:
      type: string
      enum:
        - agent
        - team
        - workflow
      title: EvalFilterType
    EvalRunInput:
      properties:
        agent_id:
          anyOf:
            - type: string
            - type: "null"
          title: Agent Id
        team_id:
          anyOf:
            - type: string
            - type: "null"
          title: Team Id
        model_id:
          anyOf:
            - type: string
            - type: "null"
          title: Model Id
        model_provider:
          anyOf:
            - type: string
            - type: "null"
          title: Model Provider
        eval_type:
          $ref: '#/components/schemas/EvalType'
        input:
          type: string
          title: Input
        additional_guidelines:
          anyOf:
            - type: string
            - type: "null"
          title: Additional Guidelines
        additional_context:
          anyOf:
            - type: string
            - type: "null"
          title: Additional Context
        num_iterations:
          anyOf:
            - type: integer
            - type: "null"
          title: Num Iterations
          default: 1
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        expected_output:
          anyOf:
            - type: string
            - type: "null"
          title: Expected Output
        warmup_runs:
          anyOf:
            - type: integer
            - type: "null"
          title: Warmup Runs
          default: 0
        expected_tool_calls:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Expected Tool Calls
      type: object
      required:
        - eval_type
        - input
      title: EvalRunInput
    EvalSchema:
      properties:
        id:
          type: string
          title: Id
        agent_id:
          anyOf:
            - type: string
            - type: "null"
          title: Agent Id
        model_id:
          anyOf:
            - type: string
            - type: "null"
          title: Model Id
        model_provider:
          anyOf:
            - type: string
            - type: "null"
          title: Model Provider
        team_id:
          anyOf:
            - type: string
            - type: "null"
          title: Team Id
        workflow_id:
          anyOf:
            - type: string
            - type: "null"
          title: Workflow Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        evaluated_component_name:
          anyOf:
            - type: string
            - type: "null"
          title: Evaluated Component Name
        eval_type:
          $ref: '#/components/schemas/EvalType'
        eval_data:
          additionalProperties: true
          type: object
          title: Eval Data
        eval_input:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Eval Input
        created_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Created At
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Updated At
      type: object
      required:
        - id
        - eval_type
        - eval_data
      title: EvalSchema
    EvalType:
      type: string
      enum:
        - accuracy
        - performance
        - reliability
      title: EvalType
    EvalsConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
        available_models:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Available Models
        dbs:
          anyOf:
            - items:
                $ref: '#/components/schemas/DatabaseConfig_EvalsDomainConfig_'
              type: array
            - type: "null"
          title: Dbs
      type: object
      title: EvalsConfig
      description: Configuration for the Evals domain of the AgentOS
    EvalsDomainConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
        available_models:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Available Models
      type: object
      title: EvalsDomainConfig
      description: Configuration for the Evals domain of the AgentOS
    HealthResponse:
      properties:
        status:
          type: string
          title: Status
      type: object
      required:
        - status
      title: HealthResponse
      example:
        status: ok
    InterfaceResponse:
      properties:
        type:
          type: string
          title: Type
        version:
          type: string
          title: Version
        route:
          type: string
          title: Route
      type: object
      required:
        - type
        - version
        - route
      title: InterfaceResponse
    InternalServerErrorResponse:
      properties:
        detail:
          type: string
          title: Detail
        error_code:
          anyOf:
            - type: string
            - type: "null"
          title: Error Code
      type: object
      required:
        - detail
      title: InternalServerErrorResponse
      example:
        detail: Internal server error
        error_code: INTERNAL_SERVER_ERROR
    KnowledgeConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
        dbs:
          anyOf:
            - items:
                $ref: '#/components/schemas/DatabaseConfig_KnowledgeDomainConfig_'
              type: array
            - type: "null"
          title: Dbs
      type: object
      title: KnowledgeConfig
      description: Configuration for the Knowledge domain of the AgentOS
    KnowledgeDomainConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
      type: object
      title: KnowledgeDomainConfig
      description: Configuration for the Knowledge domain of the AgentOS
    MemoryConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
        dbs:
          anyOf:
            - items:
                $ref: '#/components/schemas/DatabaseConfig_MemoryDomainConfig_'
              type: array
            - type: "null"
          title: Dbs
      type: object
      title: MemoryConfig
      description: Configuration for the Memory domain of the AgentOS
    MemoryDomainConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
      type: object
      title: MemoryDomainConfig
      description: Configuration for the Memory domain of the AgentOS
    MetricsConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
        dbs:
          anyOf:
            - items:
                $ref: '#/components/schemas/DatabaseConfig_MetricsDomainConfig_'
              type: array
            - type: "null"
          title: Dbs
      type: object
      title: MetricsConfig
      description: Configuration for the Metrics domain of the AgentOS
    MetricsDomainConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
      type: object
      title: MetricsDomainConfig
      description: Configuration for the Metrics domain of the AgentOS
    MetricsResponse:
      properties:
        metrics:
          items:
            $ref: '#/components/schemas/DayAggregatedMetrics'
          type: array
          title: Metrics
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Updated At
      type: object
      required:
        - metrics
        - updated_at
      title: MetricsResponse
    Model:
      properties:
        id:
          anyOf:
            - type: string
            - type: "null"
          title: Id
        provider:
          anyOf:
            - type: string
            - type: "null"
          title: Provider
      type: object
      title: Model
    ModelResponse:
      properties:
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        model:
          anyOf:
            - type: string
            - type: "null"
          title: Model
        provider:
          anyOf:
            - type: string
            - type: "null"
          title: Provider
      type: object
      title: ModelResponse
    NotFoundResponse:
      properties:
        detail:
          type: string
          title: Detail
        error_code:
          anyOf:
            - type: string
            - type: "null"
          title: Error Code
      type: object
      required:
        - detail
      title: NotFoundResponse
      example:
        detail: Not found
        error_code: NOT_FOUND
    PaginatedResponse_ContentResponseSchema_:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ContentResponseSchema'
          type: array
          title: Data
        meta:
          $ref: '#/components/schemas/PaginationInfo'
      type: object
      required:
        - data
        - meta
      title: PaginatedResponse[ContentResponseSchema]
    PaginatedResponse_EvalSchema_:
      properties:
        data:
          items:
            $ref: '#/components/schemas/EvalSchema'
          type: array
          title: Data
        meta:
          $ref: '#/components/schemas/PaginationInfo'
      type: object
      required:
        - data
        - meta
      title: PaginatedResponse[EvalSchema]
    PaginatedResponse_SessionSchema_:
      properties:
        data:
          items:
            $ref: '#/components/schemas/SessionSchema'
          type: array
          title: Data
        meta:
          $ref: '#/components/schemas/PaginationInfo'
      type: object
      required:
        - data
        - meta
      title: PaginatedResponse[SessionSchema]
    PaginatedResponse_UserMemorySchema_:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserMemorySchema'
          type: array
          title: Data
        meta:
          $ref: '#/components/schemas/PaginationInfo'
      type: object
      required:
        - data
        - meta
      title: PaginatedResponse[UserMemorySchema]
    PaginatedResponse_UserStatsSchema_:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserStatsSchema'
          type: array
          title: Data
        meta:
          $ref: '#/components/schemas/PaginationInfo'
      type: object
      required:
        - data
        - meta
      title: PaginatedResponse[UserStatsSchema]
    PaginationInfo:
      properties:
        page:
          anyOf:
            - type: integer
            - type: "null"
          title: Page
          default: 0
        limit:
          anyOf:
            - type: integer
            - type: "null"
          title: Limit
          default: 20
        total_pages:
          anyOf:
            - type: integer
            - type: "null"
          title: Total Pages
          default: 0
        total_count:
          anyOf:
            - type: integer
            - type: "null"
          title: Total Count
          default: 0
      type: object
      title: PaginationInfo
    ReaderSchema:
      properties:
        id:
          type: string
          title: Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
        chunkers:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Chunkers
      type: object
      required:
        - id
      title: ReaderSchema
    RunSchema:
      properties:
        run_id:
          type: string
          title: Run Id
        agent_session_id:
          anyOf:
            - type: string
            - type: "null"
          title: Agent Session Id
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
        run_input:
          anyOf:
            - type: string
            - type: "null"
          title: Run Input
        content:
          anyOf:
            - type: string
            - additionalProperties: true
              type: object
            - type: "null"
          title: Content
        run_response_format:
          anyOf:
            - type: string
            - type: "null"
          title: Run Response Format
        reasoning_content:
          anyOf:
            - type: string
            - type: "null"
          title: Reasoning Content
        metrics:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metrics
        messages:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Messages
        tools:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Tools
        events:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Events
        created_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Created At
      type: object
      required:
        - run_id
        - agent_session_id
        - user_id
        - run_input
        - content
        - run_response_format
        - reasoning_content
        - metrics
        - messages
        - tools
        - events
        - created_at
      title: RunSchema
    SessionConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
        dbs:
          anyOf:
            - items:
                $ref: '#/components/schemas/DatabaseConfig_SessionDomainConfig_'
              type: array
            - type: "null"
          title: Dbs
      type: object
      title: SessionConfig
      description: Configuration for the Session domain of the AgentOS
    SessionDomainConfig:
      properties:
        display_name:
          anyOf:
            - type: string
            - type: "null"
          title: Display Name
      type: object
      title: SessionDomainConfig
      description: Configuration for the Session domain of the AgentOS
    SessionSchema:
      properties:
        session_id:
          type: string
          title: Session Id
        session_name:
          type: string
          title: Session Name
        session_state:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Session State
        created_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Created At
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Updated At
      type: object
      required:
        - session_id
        - session_name
        - session_state
        - created_at
        - updated_at
      title: SessionSchema
    SessionType:
      type: string
      enum:
        - agent
        - team
        - workflow
      title: SessionType
    SortOrder:
      type: string
      enum:
        - asc
        - desc
      title: SortOrder
    TeamResponse:
      properties:
        id:
          anyOf:
            - type: string
            - type: "null"
          title: Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        db_id:
          anyOf:
            - type: string
            - type: "null"
          title: Db Id
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
        model:
          anyOf:
            - $ref: '#/components/schemas/ModelResponse'
            - type: "null"
        tools:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Tools
        sessions:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Sessions
        knowledge:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Knowledge
        memory:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Memory
        reasoning:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Reasoning
        default_tools:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Default Tools
        system_message:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: System Message
        response_settings:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Response Settings
        streaming:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Streaming
        members:
          anyOf:
            - items:
                anyOf:
                  - $ref: '#/components/schemas/AgentResponse'
                  - $ref: '#/components/schemas/TeamResponse'
              type: array
            - type: "null"
          title: Members
        metadata:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metadata
      type: object
      title: TeamResponse
    TeamRunSchema:
      properties:
        run_id:
          type: string
          title: Run Id
        parent_run_id:
          anyOf:
            - type: string
            - type: "null"
          title: Parent Run Id
        content:
          anyOf:
            - type: string
            - additionalProperties: true
              type: object
            - type: "null"
          title: Content
        reasoning_content:
          anyOf:
            - type: string
            - type: "null"
          title: Reasoning Content
        run_input:
          anyOf:
            - type: string
            - type: "null"
          title: Run Input
        run_response_format:
          anyOf:
            - type: string
            - type: "null"
          title: Run Response Format
        metrics:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metrics
        tools:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Tools
        messages:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Messages
        events:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Events
        created_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Created At
      type: object
      required:
        - run_id
        - parent_run_id
        - content
        - reasoning_content
        - run_input
        - run_response_format
        - metrics
        - tools
        - messages
        - events
        - created_at
      title: TeamRunSchema
    TeamSessionDetailSchema:
      properties:
        session_id:
          type: string
          title: Session Id
        session_name:
          type: string
          title: Session Name
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
        team_id:
          anyOf:
            - type: string
            - type: "null"
          title: Team Id
        session_summary:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Session Summary
        session_state:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Session State
        metrics:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metrics
        team_data:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Team Data
        created_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Created At
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Updated At
      type: object
      required:
        - session_id
        - session_name
        - user_id
        - team_id
        - session_summary
        - session_state
        - metrics
        - team_data
        - created_at
        - updated_at
      title: TeamSessionDetailSchema
    TeamSummaryResponse:
      properties:
        id:
          anyOf:
            - type: string
            - type: "null"
          title: Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
        db_id:
          anyOf:
            - type: string
            - type: "null"
          title: Db Id
      type: object
      title: TeamSummaryResponse
    UnauthenticatedResponse:
      properties:
        detail:
          type: string
          title: Detail
        error_code:
          anyOf:
            - type: string
            - type: "null"
          title: Error Code
      type: object
      required:
        - detail
      title: UnauthenticatedResponse
      example:
        detail: Unauthenticated access
        error_code: UNAUTHENTICATED
    UpdateEvalRunRequest:
      properties:
        name:
          type: string
          title: Name
      type: object
      required:
        - name
      title: UpdateEvalRunRequest
    UserMemoryCreateSchema:
      properties:
        memory:
          type: string
          title: Memory
        user_id:
          type: string
          title: User Id
        topics:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Topics
      type: object
      required:
        - memory
        - user_id
      title: UserMemoryCreateSchema
      description: Define the payload expected for creating a new user memory
    UserMemorySchema:
      properties:
        memory_id:
          type: string
          title: Memory Id
        memory:
          type: string
          title: Memory
        topics:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Topics
        agent_id:
          anyOf:
            - type: string
            - type: "null"
          title: Agent Id
        team_id:
          anyOf:
            - type: string
            - type: "null"
          title: Team Id
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
        updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Updated At
      type: object
      required:
        - memory_id
        - memory
        - topics
        - agent_id
        - team_id
        - user_id
        - updated_at
      title: UserMemorySchema
    UserStatsSchema:
      properties:
        user_id:
          type: string
          title: User Id
        total_memories:
          type: integer
          title: Total Memories
        last_memory_updated_at:
          anyOf:
            - type: string
              format: date-time
            - type: "null"
          title: Last Memory Updated At
      type: object
      required:
        - user_id
        - total_memories
      title: UserStatsSchema
      description: Schema for user memory statistics
    ValidationErrorResponse:
      properties:
        detail:
          type: string
          title: Detail
        error_code:
          anyOf:
            - type: string
            - type: "null"
          title: Error Code
      type: object
      required:
        - detail
      title: ValidationErrorResponse
      example:
        detail: Validation error
        error_code: VALIDATION_ERROR
    WorkflowResponse:
      properties:
        id:
          anyOf:
            - type: string
            - type: "null"
          title: Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        db_id:
          anyOf:
            - type: string
            - type: "null"
          title: Db Id
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
        input_schema:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Input Schema
        steps:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Steps
        agent:
          anyOf:
            - $ref: '#/components/schemas/AgentResponse'
            - type: "null"
        team:
          anyOf:
            - $ref: '#/components/schemas/TeamResponse'
            - type: "null"
        metadata:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metadata
      type: object
      title: WorkflowResponse
    WorkflowRunSchema:
      properties:
        run_id:
          type: string
          title: Run Id
        run_input:
          anyOf:
            - type: string
            - type: "null"
          title: Run Input
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
        content:
          anyOf:
            - type: string
            - additionalProperties: true
              type: object
            - type: "null"
          title: Content
        content_type:
          anyOf:
            - type: string
            - type: "null"
          title: Content Type
        status:
          anyOf:
            - type: string
            - type: "null"
          title: Status
        step_results:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Step Results
        step_executor_runs:
          anyOf:
            - items:
                additionalProperties: true
                type: object
              type: array
            - type: "null"
          title: Step Executor Runs
        metrics:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metrics
        created_at:
          anyOf:
            - type: integer
            - type: "null"
          title: Created At
      type: object
      required:
        - run_id
        - run_input
        - user_id
        - content
        - content_type
        - status
        - step_results
        - step_executor_runs
        - metrics
        - created_at
      title: WorkflowRunSchema
    WorkflowSessionDetailSchema:
      properties:
        user_id:
          anyOf:
            - type: string
            - type: "null"
          title: User Id
        workflow_id:
          anyOf:
            - type: string
            - type: "null"
          title: Workflow Id
        workflow_name:
          anyOf:
            - type: string
            - type: "null"
          title: Workflow Name
        session_id:
          type: string
          title: Session Id
        session_name:
          type: string
          title: Session Name
        session_data:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Session Data
        session_state:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Session State
        workflow_data:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Workflow Data
        metadata:
          anyOf:
            - additionalProperties: true
              type: object
            - type: "null"
          title: Metadata
        created_at:
          anyOf:
            - type: integer
            - type: "null"
          title: Created At
        updated_at:
          anyOf:
            - type: integer
            - type: "null"
          title: Updated At
      type: object
      required:
        - user_id
        - workflow_id
        - workflow_name
        - session_id
        - session_name
        - session_data
        - session_state
        - workflow_data
        - metadata
        - created_at
        - updated_at
      title: WorkflowSessionDetailSchema
    WorkflowSummaryResponse:
      properties:
        id:
          anyOf:
            - type: string
            - type: "null"
          title: Id
        name:
          anyOf:
            - type: string
            - type: "null"
          title: Name
        description:
          anyOf:
            - type: string
            - type: "null"
          title: Description
        db_id:
          anyOf:
            - type: string
            - type: "null"
          title: Db Id
      type: object
      title: WorkflowSummaryResponse
    A2AMessage:
      type: object
      required:
        - message_id
        - role
        - parts
      properties:
        message_id:
          type: string
          description: A unique identifier for the message, typically a UUID
        role:
          type: string
          enum: [user, agent]
          description: Identifies the sender of the message. 'user' for the client, 'agent' for the service
        parts:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/TextPart'
              - $ref: '#/components/schemas/FilePart'
              - $ref: '#/components/schemas/DataPart'
          description: An array of content parts that form the message body
        kind:
          type: string
          enum: [message]
          default: message
          description: The type of this object. Always 'message'
        context_id:
          type: string
          nullable: true
          description: The context ID for this message, used to group related interactions
        task_id:
          type: string
          nullable: true
          description: The ID of the task this message is part of
        agentId:
          type: string
          nullable: true
          description: The ID of the agent, team, or workflow to send the message to
        extensions:
          type: array
          items:
            type: string
          nullable: true
          description: The URIs of extensions that are relevant to this message
        metadata:
          type: object
          additionalProperties: true
          nullable: true
          description: Optional metadata for extensions
        reference_task_ids:
          type: array
          items:
            type: string
          nullable: true
          description: A list of other task IDs that this message references for additional context
      title: A2AMessage
    TextPart:
      type: object
      required:
        - kind
        - text
      properties:
        kind:
          type: string
          enum: [text]
          description: Always 'text'
        text:
          type: string
          description: The string content of the text part
        metadata:
          type: object
          additionalProperties: true
          nullable: true
          description: Optional metadata associated with this part
      title: TextPart
    FilePart:
      type: object
      required:
        - kind
        - file
      properties:
        kind:
          type: string
          enum: [file]
          description: Always 'file'
        file:
          oneOf:
            - $ref: '#/components/schemas/FileWithUri'
            - $ref: '#/components/schemas/FileWithBytes'
          description: The file content, represented as either a URI or as base64-encoded bytes
        metadata:
          type: object
          additionalProperties: true
          nullable: true
          description: Optional metadata associated with this part
      title: FilePart
    DataPart:
      type: object
      required:
        - kind
        - data
      properties:
        kind:
          type: string
          enum: [data]
          description: Always 'data'
        data:
          type: object
          additionalProperties: true
          description: The structured data content (JSON object)
        metadata:
          type: object
          additionalProperties: true
          nullable: true
          description: Optional metadata associated with this part
      title: DataPart
    FileWithUri:
      type: object
      required:
        - uri
      properties:
        uri:
          type: string
          description: A URL pointing to the file's content
        mime_type:
          type: string
          nullable: true
          description: The MIME type of the file (e.g., "application/pdf")
        name:
          type: string
          nullable: true
          description: An optional name for the file (e.g., "document.pdf")
      title: FileWithUri
    FileWithBytes:
      type: object
      required:
        - bytes
      properties:
        bytes:
          type: string
          format: base64
          description: The base64-encoded content of the file
        mime_type:
          type: string
          nullable: true
          description: The MIME type of the file (e.g., "application/pdf")
        name:
          type: string
          nullable: true
          description: An optional name for the file (e.g., "document.pdf")
      title: FileWithBytes
